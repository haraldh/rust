#![doc = "This file was automatically generated by the varlink rust generator"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use chainerror::*;
use serde_derive::{Deserialize, Serialize};
use serde_json;
use std::io::BufRead;
use std::sync::{Arc, RwLock};
use varlink::{self, CallTrait};
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct PingError_Args {
    pub r#parameter: i64,
}
pub trait VarlinkCallError: varlink::CallTrait {
    fn reply_ping_error(&mut self, r#parameter: i64) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "org.example.ping.PingError",
            Some(serde_json::to_value(PingError_Args { r#parameter }).map_err(minto_cherr!())?),
        ))
    }
}
impl<'a> VarlinkCallError for varlink::Call<'a> {}
#[allow(dead_code)]
#[derive(Clone, PartialEq, Debug)]
pub enum ErrorKind {
    Io_Error(::std::io::ErrorKind),
    SerdeJson_Error(serde_json::error::Category),
    Varlink_Error,
    VarlinkReply_Error(varlink::Reply),
    Generic,
    PingError(Option<PingError_Args>),
}
impl ::std::fmt::Display for ErrorKind {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ErrorKind::Io_Error(_) => write!(f, "IO error"),
            ErrorKind::SerdeJson_Error(_) => write!(f, "(De)Serialization Error"),
            ErrorKind::Varlink_Error => write!(f, "Varlink Error"),
            ErrorKind::VarlinkReply_Error(v) => write!(f, "Unknown error reply: '{:#?}'", v),
            ErrorKind::Generic => Ok(()),
            ErrorKind::PingError(v) => write!(f, "org.example.ping.PingError: {:#?}", v),
        }
    }
}
impl ::std::error::Error for ErrorKind {}
impl ChainErrorFrom<std::io::Error> for ErrorKind {
    fn chain_error_from(
        e: std::io::Error,
        line_filename: Option<(u32, &'static str)>,
    ) -> ChainError<Self> {
        ChainError::<_>::new(
            ErrorKind::Io_Error(e.kind()),
            Some(Box::from(e)),
            line_filename,
        )
    }
}
impl ChainErrorFrom<serde_json::error::Error> for ErrorKind {
    fn chain_error_from(
        e: serde_json::error::Error,
        line_filename: Option<(u32, &'static str)>,
    ) -> ChainError<Self> {
        ChainError::<_>::new(
            ErrorKind::SerdeJson_Error(e.classify()),
            Some(Box::from(e)),
            line_filename,
        )
    }
}
impl ChainErrorFrom<varlink::ErrorKind> for ErrorKind {
    fn chain_error_from(
        e: varlink::ErrorKind,
        line_filename: Option<(u32, &'static str)>,
    ) -> ChainError<Self> {
        ChainError::<_>::new(
            ErrorKind::Varlink_Error,
            Some(Box::from(ChainError::<_>::new(e, None, line_filename))),
            line_filename,
        )
    }
}
#[allow(dead_code)]
pub type Result<T> = ChainResult<T, ErrorKind>;
#[allow(dead_code)]
pub type Error = ErrorKind;
impl ChainErrorFrom<varlink::Reply> for ErrorKind {
    #[allow(unused_variables)]
    fn chain_error_from(
        e: varlink::Reply,
        line_filename: Option<(u32, &'static str)>,
    ) -> ChainError<Self> {
        if varlink::ErrorKind::is_error(&e) {
            let e: varlink::ErrorKind = e.into();
            return into_cherr!(e);
        }
        match e {
            varlink::Reply {
                error: Some(ref t), ..
            } if t == "org.example.ping.PingError" => match e {
                varlink::Reply {
                    parameters: Some(p),
                    ..
                } => match serde_json::from_value(p) {
                    Ok(v) => into_cherr!(ErrorKind::PingError(v)),
                    Err(_) => into_cherr!(ErrorKind::PingError(None)),
                },
                _ => into_cherr!(ErrorKind::PingError(None)),
            },
            _ => into_cherr!(ErrorKind::VarlinkReply_Error(e)),
        }
    }
}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct Ping_Reply {
    pub r#pong: String,
}
impl varlink::VarlinkReply for Ping_Reply {}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct Ping_Args {
    pub r#ping: String,
}
pub trait Call_Ping: VarlinkCallError {
    fn reply(&mut self, r#pong: String) -> varlink::Result<()> {
        self.reply_struct(Ping_Reply { r#pong }.into())
    }
}
impl<'a> Call_Ping for varlink::Call<'a> {}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct Upgrade_Reply {}
impl varlink::VarlinkReply for Upgrade_Reply {}
#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct Upgrade_Args {}
pub trait Call_Upgrade: VarlinkCallError {
    fn reply(&mut self) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::parameters(None))
    }
}
impl<'a> Call_Upgrade for varlink::Call<'a> {}
pub trait VarlinkInterface {
    fn ping(&self, call: &mut Call_Ping, r#ping: String) -> varlink::Result<()>;
    fn upgrade(&self, call: &mut Call_Upgrade) -> varlink::Result<()>;
    fn call_upgraded(
        &self,
        _call: &mut varlink::Call,
        _bufreader: &mut BufRead,
    ) -> varlink::Result<Vec<u8>> {
        Ok(Vec::new())
    }
}
pub trait VarlinkClientInterface {
    fn ping(&mut self, r#ping: String) -> varlink::MethodCall<Ping_Args, Ping_Reply, Error>;
    fn upgrade(&mut self) -> varlink::MethodCall<Upgrade_Args, Upgrade_Reply, Error>;
}
#[allow(dead_code)]
pub struct VarlinkClient {
    connection: Arc<RwLock<varlink::Connection>>,
}
impl VarlinkClient {
    #[allow(dead_code)]
    pub fn new(connection: Arc<RwLock<varlink::Connection>>) -> Self {
        VarlinkClient { connection }
    }
}
impl VarlinkClientInterface for VarlinkClient {
    fn ping(&mut self, r#ping: String) -> varlink::MethodCall<Ping_Args, Ping_Reply, Error> {
        varlink::MethodCall::<Ping_Args, Ping_Reply, Error>::new(
            self.connection.clone(),
            "org.example.ping.Ping",
            Ping_Args { r#ping },
        )
    }
    fn upgrade(&mut self) -> varlink::MethodCall<Upgrade_Args, Upgrade_Reply, Error> {
        varlink::MethodCall::<Upgrade_Args, Upgrade_Reply, Error>::new(
            self.connection.clone(),
            "org.example.ping.Upgrade",
            Upgrade_Args {},
        )
    }
}
#[allow(dead_code)]
pub struct VarlinkInterfaceProxy {
    inner: Box<VarlinkInterface + Send + Sync>,
}
#[allow(dead_code)]
pub fn new(inner: Box<VarlinkInterface + Send + Sync>) -> VarlinkInterfaceProxy {
    VarlinkInterfaceProxy { inner }
}
impl varlink::Interface for VarlinkInterfaceProxy {
    fn get_description(&self) -> &'static str {
        "# Example service\ninterface org.example.ping\n\n# Returns the same string\nmethod Ping(ping: string) -> (pong: string)\n\nmethod Upgrade() -> ()\n\nerror PingError(parameter: int)"
    }
    fn get_name(&self) -> &'static str {
        "org.example.ping"
    }
    fn call_upgraded(
        &self,
        call: &mut varlink::Call,
        bufreader: &mut BufRead,
    ) -> varlink::Result<Vec<u8>> {
        self.inner.call_upgraded(call, bufreader)
    }
    fn call(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        let req = call.request.unwrap();
        match req.method.as_ref() {
            "org.example.ping.Ping" => {
                if let Some(args) = req.parameters.clone() {
                    let args: Ping_Args = match serde_json::from_value(args) {
                        Ok(v) => v,
                        Err(e) => {
                            let es = format!("{}", e);
                            let _ = call.reply_invalid_parameter(es.clone());
                            return Err(into_cherr!(varlink::ErrorKind::SerdeJsonDe(es)));
                        }
                    };
                    self.inner.ping(call as &mut Call_Ping, args.r#ping)
                } else {
                    call.reply_invalid_parameter("parameters".into())
                }
            }
            "org.example.ping.Upgrade" => self.inner.upgrade(call as &mut Call_Upgrade),
            m => call.reply_method_not_found(String::from(m)),
        }
    }
}
